
services:
  redis:
    image: redis #Queue for the taks
    container_name: redis
    restart: always
    ports:
      - 6379:6379
  
  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    depends_on:
      - redis
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - 8081:8081
    
  mongodb:
    image: mongo:latest
    container_name: my-mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
  
  postgres:
    build:
      context: ./docker/
      dockerfile: Dockerfile.postgres
    image: postgres:15
    container_name: my-postgres
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    hostname: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "8080:8088"
    depends_on:
      - postgres
    
  celery:
    image: python:3.11-slim
    command: ["./spawn_celery_worker.sh", "5" ]
    container_name: worker
    build:
      context: ./
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    depends_on:
      - redis
      - redis-commander
    
  redbeat:
    container_name: redbeat
    image: python:3.11-slim
    build:
      context: ./
      dockerfile: Dockerfile
    env_file:
      - .env
    restart: always
    depends_on:
      - redis
      - redis-commander
    command: ["make ", "redbeat"]
    
  flower:
    image: python:3.11-slim
    command: ["make", "flower"]
    container_name: flower
    build:
      context: ./
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    depends_on:
      - redis
      - redis-commander
    ports:
      - "5555:5555"

  neo4j:
    image: neo4j:5.15
    container_name: neo4j
    restart: unless-stopped
    ports:
      - "7687:7687"
      - "7474:7474"
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_dbms_memory_pagecache_size=512m
      - NEO4J_dbms_default__database=${NEO4J_DATABASE}

    volumes:
        - neo4j_data:/data
        - neo4j_logs:/logs
        - neo4j_conf:/conf
  
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
  

  twilio:
    image: node:20.19.0-slim
    container_name: local-twilio
    restart: always
    build:
      context: ./docker/
      dockerfile: Dockerfile.twilio
    ports:
      - "3000:3000"
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
      - NGROK_URL=${NGROK_URL}
    
    
volumes:
  mongo-data:
    driver: local

  postgres-data:
    driver: local

  assets-data:
    driver: local

  neo4j_data:
  neo4j_logs:
  neo4j_conf:
