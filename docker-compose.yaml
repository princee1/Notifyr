services:


  settingdb:
    image: json-server:custom
    container_name: notifyr-settingdb
    build:
      context: .
      dockerfile: ./docker/Dockerfile.settingdb
    ports:
      - "3000:3000"
    volumes:
      - settingdb-data:/data

  redis:
    image: redis #Queue for the taks
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    volumes:
      - redis-data:/data
  
  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    depends_on:
      - redis
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - 6060:6060

  reacherhq:
    image: reacherhq/backend
    container_name: reacherhq
    ports:
      - "8040:8040"
          
  mongodb:
    image: mongo:latest
    container_name: notifyr-mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
  
  postgres:
    build:
      context: .
      dockerfile: docker/Dockerfile.postgres
    image: postgres:15
    container_name: notifyr-postgres
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER} 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: notifyr

  vault-prod:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.vault
    container_name: notifyr-vault-prod
    cap_add: ["IPC_LOCK"]
    ports:
      - "8200:8200"
    environment:
      VAULT_ADDR: "http://0.0.0.0:8200"
    volumes:
      - vault-data:/vault/data
      - vault-shared:/vault/shared
      #- vault-secrets:/vault/secrets
    secrets:
      - approle_role_id
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    container_name: notifyr-pgadmin
    restart: always
    hostname: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "7070:7070"
    depends_on:
      - postgres
    
  worker:
    image: notifyr:celery
    command: ["./spawn_celery_worker.sh", "1", "true" ]
    container_name: notifyr-worker
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
    restart: always
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - REDIS_URL=redis://redis    
      - MODE=prod
    env_file:
      - .env
    depends_on:
      - redis
  
  flower:
    image: python:3.11-slim
    command: ["make", "flower"]
    container_name: notifyr-flower
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
    restart: always
    env_file:
      - .env
    depends_on:
      - redis
    ports:
      - "5555:5555"

  neo4j:
    image: neo4j:5.15
    container_name: neo4j
    restart: unless-stopped
    ports:
      - "7687:7687"
      - "7474:7474"
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_dbms_memory_pagecache_size=512m
      - NEO4J_dbms_default__database=${NEO4J_DATABASE}

    volumes:
        - neo4j_data:/data
        - neo4j_logs:/logs
        - neo4j_conf:/conf
  
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    
  pgbouncer:
    image: edoburu/pgbouncer
    container_name: notifyr-pgbouncer
    restart: always
    ports:
      - "6432:6432" # PgBouncer listens on port 6432
    volumes:
      - ./docker/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./docker/userlist.txt:/etc/pgbouncer/userlist.txt
    environment:
      - DB_HOST=notifyr-postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - postgres
    
  app:
    image: notifyr:fastapi
    container_name: notifyr-app
    command: ["python", "main.py","-H=0.0.0.0","-p=8088",'-t=solo']
    #command: ['uvicorn', 'main:app', '--workers' ,'${WORKERS_COUNT}','--host','0.0.0.0','--port' ,'8088']
    ports:
      - "8088-8100:8088"
    build:
      context: ./
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://0.0.0.0
      - MONGO_URI=mongo://0.0.0.0:27017
      - WORKERS_COUNT=4
      - MODE=prod
      - SETTING_DB_URL=http://0.0.0.0:3000
    env_file:
      - .env
    depends_on:
      - redis
      - mongodb

  balancer:
    container_name: notifyr-balancer
    build:
      context: .
      dockerfile: docker/Dockerfile.balancer
    ports:
      - 8080


volumes:

  vault-data: {}
  vault-shared: {}   # holds secret_id
  #vault-secrets: {}  # holds root_token/unseal_key (optional, only for admin access)

  mongo-data:
    driver: local

  postgres-data:
    driver: local

  assets-data:
    driver: local
  
  settingdb-data:


  neo4j_data:
  neo4j_logs:
  neo4j_conf:
  redis-data:
    driver: local

secrets:
  approle_role_id:
    file: ./bootstrap/role_id.txt   # created after first container init